{
  "name": "regex-robin",
  "displayName": "Regex Robin",
  "description": "Style, manipulate and create links in your editor using regular expressions.",
  "version": "1.0.2",
  "publisher": "DanLevett",
  "license": "MIT",
  "engines": {
    "vscode": "^1.74.0"
  },
  "repository": {
    "url": "https://github.com/dlevs/vscode-regex-robin"
  },
  "scripts": {
    "vscode:prepublish": "npm run build && npm run lint && npm run test",
    "build": "npm run build:extension && npm run build:config",
    "build:extension": "tsc",
    "build:config": "ts-node ./src/scripts/generateConfigSchema.ts",
    "watch": "tsc -watch",
    "lint": "eslint . --ext .ts,.tsx",
    "test": "vitest"
  },
  "dependencies": {
    "lodash": "^4.17.21"
  },
  "devDependencies": {
    "@types/lodash": "^4.14.191",
    "@types/node": "^18.11.17",
    "@types/vscode": "^1.74.0",
    "@typescript-eslint/eslint-plugin": "^5.47.0",
    "@typescript-eslint/parser": "^5.47.0",
    "deref": "^0.7.6",
    "eslint": "^8.30.0",
    "eslint-config-prettier": "^8.5.0",
    "prettier": "^2.8.1",
    "ts-json-schema-generator": "^1.2.0",
    "ts-node": "^10.9.1",
    "type-fest": "^3.4.0",
    "typescript": "^4.9.4",
    "vitest": "^0.26.2"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onStartupFinished"
  ],
  "icon": "assets/icon.png",
  "keywords": [
    "regex",
    "color",
    "highlight",
    "link",
    "replace",
    "inline",
    "shorten",
    "decorate",
    "pattern",
    "auto",
    "autolink"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "configuration": {
      "title": "Regex Robin",
      "type": "object",
      "properties": {
        "regexrobin.rules": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "regex": {
                "type": "string",
                "markdownDescription": "A regex pattern to search for."
              },
              "regexFlags": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "ignoreCase": {
                        "type": "boolean",
                        "markdownDescription": "When matching, casing differences are ignored.",
                        "default": false
                      },
                      "multiline": {
                        "type": "boolean",
                        "markdownDescription": "Treat beginning and end assertions (`^` and `$`) as working over multiple lines. In other words, match the beginning or end of each line (delimited by `\\n` or `\\r`), not only the very beginning or end of the whole input string.",
                        "default": false
                      },
                      "dotAll": {
                        "type": "boolean",
                        "markdownDescription": "Allows `.` to match newlines.",
                        "default": false
                      },
                      "unicode": {
                        "type": "boolean",
                        "markdownDescription": "Treat the string being matched as a sequence of Unicode code points.",
                        "default": false
                      }
                    },
                    "additionalProperties": false,
                    "markdownDescription": "Flags to apply to a regex pattern.\n\nDocumentation taken from [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp)."
                  }
                ],
                "markdownDescription": "Flags to apply to the regex pattern."
              },
              "languages": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "markdownDescription": "Languages to apply this rule to.\n\nIf not specified, the rule will be applied to all languages.\n\nThere is a special \"terminal\" language that can be used to provide links for texts in the editor terminal.",
                "default": [
                  "*"
                ]
              },
              "editor": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "backgroundColor": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "markdownDescription": "A reference to one of the workbench colors as defined in https://code.visualstudio.com/docs/getstarted/theme-color-reference. Using a theme color is preferred over a custom color as it gives theme authors and users the possibility to change the color."
                        }
                      ],
                      "markdownDescription": "Background color of the decoration. Use rgba() and define transparent background colors to play well with other decorations. Alternatively a color from the color registry can be  {@link  ThemeColor referenced } ."
                    },
                    "outline": {
                      "type": "string",
                      "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration."
                    },
                    "outlineColor": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "markdownDescription": "A reference to one of the workbench colors as defined in https://code.visualstudio.com/docs/getstarted/theme-color-reference. Using a theme color is preferred over a custom color as it gives theme authors and users the possibility to change the color."
                        }
                      ],
                      "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration. Better use 'outline' for setting one or more of the individual outline properties."
                    },
                    "outlineStyle": {
                      "type": "string",
                      "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration. Better use 'outline' for setting one or more of the individual outline properties."
                    },
                    "outlineWidth": {
                      "type": "string",
                      "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration. Better use 'outline' for setting one or more of the individual outline properties."
                    },
                    "border": {
                      "type": "string",
                      "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration."
                    },
                    "borderColor": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "markdownDescription": "A reference to one of the workbench colors as defined in https://code.visualstudio.com/docs/getstarted/theme-color-reference. Using a theme color is preferred over a custom color as it gives theme authors and users the possibility to change the color."
                        }
                      ],
                      "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration. Better use 'border' for setting one or more of the individual border properties."
                    },
                    "borderRadius": {
                      "type": "string",
                      "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration. Better use 'border' for setting one or more of the individual border properties."
                    },
                    "borderSpacing": {
                      "type": "string",
                      "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration. Better use 'border' for setting one or more of the individual border properties."
                    },
                    "borderStyle": {
                      "type": "string",
                      "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration. Better use 'border' for setting one or more of the individual border properties."
                    },
                    "borderWidth": {
                      "type": "string",
                      "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration. Better use 'border' for setting one or more of the individual border properties."
                    },
                    "fontStyle": {
                      "type": "string",
                      "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration."
                    },
                    "fontWeight": {
                      "type": "string",
                      "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration."
                    },
                    "textDecoration": {
                      "type": "string",
                      "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration."
                    },
                    "cursor": {
                      "type": "string",
                      "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration."
                    },
                    "color": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "markdownDescription": "A reference to one of the workbench colors as defined in https://code.visualstudio.com/docs/getstarted/theme-color-reference. Using a theme color is preferred over a custom color as it gives theme authors and users the possibility to change the color."
                        }
                      ],
                      "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration."
                    },
                    "opacity": {
                      "type": "string",
                      "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration."
                    },
                    "letterSpacing": {
                      "type": "string",
                      "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration."
                    },
                    "gutterIconPath": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "scheme": {
                              "type": "string",
                              "markdownDescription": "Scheme is the `http` part of `http://www.example.com/some/path?query#fragment`. The part before the first colon."
                            },
                            "authority": {
                              "type": "string",
                              "markdownDescription": "Authority is the `www.example.com` part of `http://www.example.com/some/path?query#fragment`. The part between the first double slashes and the next slash."
                            },
                            "path": {
                              "type": "string",
                              "markdownDescription": "Path is the `/some/path` part of `http://www.example.com/some/path?query#fragment`."
                            },
                            "query": {
                              "type": "string",
                              "markdownDescription": "Query is the `query` part of `http://www.example.com/some/path?query#fragment`."
                            },
                            "fragment": {
                              "type": "string",
                              "markdownDescription": "Fragment is the `fragment` part of `http://www.example.com/some/path?query#fragment`."
                            },
                            "fsPath": {
                              "type": "string",
                              "markdownDescription": "The string representing the corresponding file system path of this Uri.\n\nWill handle UNC paths and normalize windows drive letters to lower-case. Also uses the platform specific path separator.\n\n* Will *not* validate the path for invalid characters and semantics.\n* Will *not* look at the scheme of this Uri.\n* The resulting string shall *not* be used for display purposes but for disk operations, like `readFile` et al.\n\nThe *difference* to the  {@linkcode  Uri.path path } -property is the use of the platform specific path separator and the handling of UNC paths. The sample below outlines the difference: ```ts const u = URI.parse('file://server/c$/folder/file.txt') u.authority === 'server' u.path === '/shares/c$/file.txt' u.fsPath === '\\\\server\\c$\\folder\\file.txt' ```"
                            }
                          },
                          "required": [
                            "scheme",
                            "authority",
                            "path",
                            "query",
                            "fragment",
                            "fsPath"
                          ],
                          "additionalProperties": false,
                          "markdownDescription": "A universal resource identifier representing either a file on disk or another resource, like untitled resources."
                        }
                      ],
                      "markdownDescription": "An **absolute path** or an URI to an image to be rendered in the gutter."
                    },
                    "gutterIconSize": {
                      "type": "string",
                      "markdownDescription": "Specifies the size of the gutter icon. Available values are 'auto', 'contain', 'cover' and any percentage value. For further information: https://msdn.microsoft.com/en-us/library/jj127316(v=vs.85).aspx"
                    },
                    "overviewRulerColor": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "markdownDescription": "A reference to one of the workbench colors as defined in https://code.visualstudio.com/docs/getstarted/theme-color-reference. Using a theme color is preferred over a custom color as it gives theme authors and users the possibility to change the color."
                        }
                      ],
                      "markdownDescription": "The color of the decoration in the overview ruler. Use rgba() and define transparent colors to play well with other decorations."
                    },
                    "before": {
                      "markdownDescription": "Defines the rendering options of the attachment that is inserted before the decorated text.",
                      "type": "object",
                      "properties": {
                        "contentText": {
                          "type": "string",
                          "markdownDescription": "Defines a text content that is shown in the attachment. Either an icon or a text can be shown, but not both."
                        },
                        "contentIconPath": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "scheme": {
                                  "type": "string",
                                  "markdownDescription": "Scheme is the `http` part of `http://www.example.com/some/path?query#fragment`. The part before the first colon."
                                },
                                "authority": {
                                  "type": "string",
                                  "markdownDescription": "Authority is the `www.example.com` part of `http://www.example.com/some/path?query#fragment`. The part between the first double slashes and the next slash."
                                },
                                "path": {
                                  "type": "string",
                                  "markdownDescription": "Path is the `/some/path` part of `http://www.example.com/some/path?query#fragment`."
                                },
                                "query": {
                                  "type": "string",
                                  "markdownDescription": "Query is the `query` part of `http://www.example.com/some/path?query#fragment`."
                                },
                                "fragment": {
                                  "type": "string",
                                  "markdownDescription": "Fragment is the `fragment` part of `http://www.example.com/some/path?query#fragment`."
                                },
                                "fsPath": {
                                  "type": "string",
                                  "markdownDescription": "The string representing the corresponding file system path of this Uri.\n\nWill handle UNC paths and normalize windows drive letters to lower-case. Also uses the platform specific path separator.\n\n* Will *not* validate the path for invalid characters and semantics.\n* Will *not* look at the scheme of this Uri.\n* The resulting string shall *not* be used for display purposes but for disk operations, like `readFile` et al.\n\nThe *difference* to the  {@linkcode  Uri.path path } -property is the use of the platform specific path separator and the handling of UNC paths. The sample below outlines the difference: ```ts const u = URI.parse('file://server/c$/folder/file.txt') u.authority === 'server' u.path === '/shares/c$/file.txt' u.fsPath === '\\\\server\\c$\\folder\\file.txt' ```"
                                }
                              },
                              "required": [
                                "scheme",
                                "authority",
                                "path",
                                "query",
                                "fragment",
                                "fsPath"
                              ],
                              "additionalProperties": false,
                              "markdownDescription": "A universal resource identifier representing either a file on disk or another resource, like untitled resources."
                            }
                          ],
                          "markdownDescription": "An **absolute path** or an URI to an image to be rendered in the attachment. Either an icon or a text can be shown, but not both."
                        },
                        "border": {
                          "type": "string",
                          "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                        },
                        "borderColor": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "additionalProperties": false,
                              "markdownDescription": "A reference to one of the workbench colors as defined in https://code.visualstudio.com/docs/getstarted/theme-color-reference. Using a theme color is preferred over a custom color as it gives theme authors and users the possibility to change the color."
                            }
                          ],
                          "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration."
                        },
                        "fontStyle": {
                          "type": "string",
                          "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                        },
                        "fontWeight": {
                          "type": "string",
                          "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                        },
                        "textDecoration": {
                          "type": "string",
                          "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                        },
                        "color": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "additionalProperties": false,
                              "markdownDescription": "A reference to one of the workbench colors as defined in https://code.visualstudio.com/docs/getstarted/theme-color-reference. Using a theme color is preferred over a custom color as it gives theme authors and users the possibility to change the color."
                            }
                          ],
                          "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                        },
                        "backgroundColor": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "additionalProperties": false,
                              "markdownDescription": "A reference to one of the workbench colors as defined in https://code.visualstudio.com/docs/getstarted/theme-color-reference. Using a theme color is preferred over a custom color as it gives theme authors and users the possibility to change the color."
                            }
                          ],
                          "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                        },
                        "margin": {
                          "type": "string",
                          "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                        },
                        "width": {
                          "type": "string",
                          "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                        },
                        "height": {
                          "type": "string",
                          "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                        }
                      },
                      "additionalProperties": false
                    },
                    "after": {
                      "markdownDescription": "Defines the rendering options of the attachment that is inserted after the decorated text.",
                      "type": "object",
                      "properties": {
                        "contentText": {
                          "type": "string",
                          "markdownDescription": "Defines a text content that is shown in the attachment. Either an icon or a text can be shown, but not both."
                        },
                        "contentIconPath": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "scheme": {
                                  "type": "string",
                                  "markdownDescription": "Scheme is the `http` part of `http://www.example.com/some/path?query#fragment`. The part before the first colon."
                                },
                                "authority": {
                                  "type": "string",
                                  "markdownDescription": "Authority is the `www.example.com` part of `http://www.example.com/some/path?query#fragment`. The part between the first double slashes and the next slash."
                                },
                                "path": {
                                  "type": "string",
                                  "markdownDescription": "Path is the `/some/path` part of `http://www.example.com/some/path?query#fragment`."
                                },
                                "query": {
                                  "type": "string",
                                  "markdownDescription": "Query is the `query` part of `http://www.example.com/some/path?query#fragment`."
                                },
                                "fragment": {
                                  "type": "string",
                                  "markdownDescription": "Fragment is the `fragment` part of `http://www.example.com/some/path?query#fragment`."
                                },
                                "fsPath": {
                                  "type": "string",
                                  "markdownDescription": "The string representing the corresponding file system path of this Uri.\n\nWill handle UNC paths and normalize windows drive letters to lower-case. Also uses the platform specific path separator.\n\n* Will *not* validate the path for invalid characters and semantics.\n* Will *not* look at the scheme of this Uri.\n* The resulting string shall *not* be used for display purposes but for disk operations, like `readFile` et al.\n\nThe *difference* to the  {@linkcode  Uri.path path } -property is the use of the platform specific path separator and the handling of UNC paths. The sample below outlines the difference: ```ts const u = URI.parse('file://server/c$/folder/file.txt') u.authority === 'server' u.path === '/shares/c$/file.txt' u.fsPath === '\\\\server\\c$\\folder\\file.txt' ```"
                                }
                              },
                              "required": [
                                "scheme",
                                "authority",
                                "path",
                                "query",
                                "fragment",
                                "fsPath"
                              ],
                              "additionalProperties": false,
                              "markdownDescription": "A universal resource identifier representing either a file on disk or another resource, like untitled resources."
                            }
                          ],
                          "markdownDescription": "An **absolute path** or an URI to an image to be rendered in the attachment. Either an icon or a text can be shown, but not both."
                        },
                        "border": {
                          "type": "string",
                          "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                        },
                        "borderColor": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "additionalProperties": false,
                              "markdownDescription": "A reference to one of the workbench colors as defined in https://code.visualstudio.com/docs/getstarted/theme-color-reference. Using a theme color is preferred over a custom color as it gives theme authors and users the possibility to change the color."
                            }
                          ],
                          "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration."
                        },
                        "fontStyle": {
                          "type": "string",
                          "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                        },
                        "fontWeight": {
                          "type": "string",
                          "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                        },
                        "textDecoration": {
                          "type": "string",
                          "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                        },
                        "color": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "additionalProperties": false,
                              "markdownDescription": "A reference to one of the workbench colors as defined in https://code.visualstudio.com/docs/getstarted/theme-color-reference. Using a theme color is preferred over a custom color as it gives theme authors and users the possibility to change the color."
                            }
                          ],
                          "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                        },
                        "backgroundColor": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "additionalProperties": false,
                              "markdownDescription": "A reference to one of the workbench colors as defined in https://code.visualstudio.com/docs/getstarted/theme-color-reference. Using a theme color is preferred over a custom color as it gives theme authors and users the possibility to change the color."
                            }
                          ],
                          "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                        },
                        "margin": {
                          "type": "string",
                          "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                        },
                        "width": {
                          "type": "string",
                          "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                        },
                        "height": {
                          "type": "string",
                          "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                        }
                      },
                      "additionalProperties": false
                    },
                    "isWholeLine": {
                      "type": "boolean",
                      "markdownDescription": "Should the decoration be rendered also on the whitespace after the line text. Defaults to `false`."
                    },
                    "rangeBehavior": {
                      "markdownDescription": "Describes the behavior of decorations when typing/editing at their edges.",
                      "type": "number",
                      "enum": [
                        0,
                        1,
                        2,
                        3
                      ]
                    },
                    "overviewRulerLane": {
                      "markdownDescription": "Represents different positions for rendering a decoration in an  {@link  DecorationRenderOptions.overviewRulerLane overview ruler } . The overview ruler supports three lanes.",
                      "type": "number",
                      "enum": [
                        1,
                        2,
                        4,
                        7
                      ]
                    },
                    "light": {
                      "markdownDescription": "Represents theme specific rendering styles for a  {@link  TextEditorDecorationType text editor decoration } .",
                      "type": "object",
                      "properties": {
                        "backgroundColor": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "additionalProperties": false,
                              "markdownDescription": "A reference to one of the workbench colors as defined in https://code.visualstudio.com/docs/getstarted/theme-color-reference. Using a theme color is preferred over a custom color as it gives theme authors and users the possibility to change the color."
                            }
                          ],
                          "markdownDescription": "Background color of the decoration. Use rgba() and define transparent background colors to play well with other decorations. Alternatively a color from the color registry can be  {@link  ThemeColor referenced } ."
                        },
                        "outline": {
                          "type": "string",
                          "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration."
                        },
                        "outlineColor": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "additionalProperties": false,
                              "markdownDescription": "A reference to one of the workbench colors as defined in https://code.visualstudio.com/docs/getstarted/theme-color-reference. Using a theme color is preferred over a custom color as it gives theme authors and users the possibility to change the color."
                            }
                          ],
                          "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration. Better use 'outline' for setting one or more of the individual outline properties."
                        },
                        "outlineStyle": {
                          "type": "string",
                          "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration. Better use 'outline' for setting one or more of the individual outline properties."
                        },
                        "outlineWidth": {
                          "type": "string",
                          "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration. Better use 'outline' for setting one or more of the individual outline properties."
                        },
                        "border": {
                          "type": "string",
                          "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration."
                        },
                        "borderColor": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "additionalProperties": false,
                              "markdownDescription": "A reference to one of the workbench colors as defined in https://code.visualstudio.com/docs/getstarted/theme-color-reference. Using a theme color is preferred over a custom color as it gives theme authors and users the possibility to change the color."
                            }
                          ],
                          "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration. Better use 'border' for setting one or more of the individual border properties."
                        },
                        "borderRadius": {
                          "type": "string",
                          "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration. Better use 'border' for setting one or more of the individual border properties."
                        },
                        "borderSpacing": {
                          "type": "string",
                          "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration. Better use 'border' for setting one or more of the individual border properties."
                        },
                        "borderStyle": {
                          "type": "string",
                          "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration. Better use 'border' for setting one or more of the individual border properties."
                        },
                        "borderWidth": {
                          "type": "string",
                          "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration. Better use 'border' for setting one or more of the individual border properties."
                        },
                        "fontStyle": {
                          "type": "string",
                          "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration."
                        },
                        "fontWeight": {
                          "type": "string",
                          "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration."
                        },
                        "textDecoration": {
                          "type": "string",
                          "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration."
                        },
                        "cursor": {
                          "type": "string",
                          "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration."
                        },
                        "color": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "additionalProperties": false,
                              "markdownDescription": "A reference to one of the workbench colors as defined in https://code.visualstudio.com/docs/getstarted/theme-color-reference. Using a theme color is preferred over a custom color as it gives theme authors and users the possibility to change the color."
                            }
                          ],
                          "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration."
                        },
                        "opacity": {
                          "type": "string",
                          "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration."
                        },
                        "letterSpacing": {
                          "type": "string",
                          "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration."
                        },
                        "gutterIconPath": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "scheme": {
                                  "type": "string",
                                  "markdownDescription": "Scheme is the `http` part of `http://www.example.com/some/path?query#fragment`. The part before the first colon."
                                },
                                "authority": {
                                  "type": "string",
                                  "markdownDescription": "Authority is the `www.example.com` part of `http://www.example.com/some/path?query#fragment`. The part between the first double slashes and the next slash."
                                },
                                "path": {
                                  "type": "string",
                                  "markdownDescription": "Path is the `/some/path` part of `http://www.example.com/some/path?query#fragment`."
                                },
                                "query": {
                                  "type": "string",
                                  "markdownDescription": "Query is the `query` part of `http://www.example.com/some/path?query#fragment`."
                                },
                                "fragment": {
                                  "type": "string",
                                  "markdownDescription": "Fragment is the `fragment` part of `http://www.example.com/some/path?query#fragment`."
                                },
                                "fsPath": {
                                  "type": "string",
                                  "markdownDescription": "The string representing the corresponding file system path of this Uri.\n\nWill handle UNC paths and normalize windows drive letters to lower-case. Also uses the platform specific path separator.\n\n* Will *not* validate the path for invalid characters and semantics.\n* Will *not* look at the scheme of this Uri.\n* The resulting string shall *not* be used for display purposes but for disk operations, like `readFile` et al.\n\nThe *difference* to the  {@linkcode  Uri.path path } -property is the use of the platform specific path separator and the handling of UNC paths. The sample below outlines the difference: ```ts const u = URI.parse('file://server/c$/folder/file.txt') u.authority === 'server' u.path === '/shares/c$/file.txt' u.fsPath === '\\\\server\\c$\\folder\\file.txt' ```"
                                }
                              },
                              "required": [
                                "scheme",
                                "authority",
                                "path",
                                "query",
                                "fragment",
                                "fsPath"
                              ],
                              "additionalProperties": false,
                              "markdownDescription": "A universal resource identifier representing either a file on disk or another resource, like untitled resources."
                            }
                          ],
                          "markdownDescription": "An **absolute path** or an URI to an image to be rendered in the gutter."
                        },
                        "gutterIconSize": {
                          "type": "string",
                          "markdownDescription": "Specifies the size of the gutter icon. Available values are 'auto', 'contain', 'cover' and any percentage value. For further information: https://msdn.microsoft.com/en-us/library/jj127316(v=vs.85).aspx"
                        },
                        "overviewRulerColor": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "additionalProperties": false,
                              "markdownDescription": "A reference to one of the workbench colors as defined in https://code.visualstudio.com/docs/getstarted/theme-color-reference. Using a theme color is preferred over a custom color as it gives theme authors and users the possibility to change the color."
                            }
                          ],
                          "markdownDescription": "The color of the decoration in the overview ruler. Use rgba() and define transparent colors to play well with other decorations."
                        },
                        "before": {
                          "markdownDescription": "Defines the rendering options of the attachment that is inserted before the decorated text.",
                          "type": "object",
                          "properties": {
                            "contentText": {
                              "type": "string",
                              "markdownDescription": "Defines a text content that is shown in the attachment. Either an icon or a text can be shown, but not both."
                            },
                            "contentIconPath": {
                              "anyOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "scheme": {
                                      "type": "string",
                                      "markdownDescription": "Scheme is the `http` part of `http://www.example.com/some/path?query#fragment`. The part before the first colon."
                                    },
                                    "authority": {
                                      "type": "string",
                                      "markdownDescription": "Authority is the `www.example.com` part of `http://www.example.com/some/path?query#fragment`. The part between the first double slashes and the next slash."
                                    },
                                    "path": {
                                      "type": "string",
                                      "markdownDescription": "Path is the `/some/path` part of `http://www.example.com/some/path?query#fragment`."
                                    },
                                    "query": {
                                      "type": "string",
                                      "markdownDescription": "Query is the `query` part of `http://www.example.com/some/path?query#fragment`."
                                    },
                                    "fragment": {
                                      "type": "string",
                                      "markdownDescription": "Fragment is the `fragment` part of `http://www.example.com/some/path?query#fragment`."
                                    },
                                    "fsPath": {
                                      "type": "string",
                                      "markdownDescription": "The string representing the corresponding file system path of this Uri.\n\nWill handle UNC paths and normalize windows drive letters to lower-case. Also uses the platform specific path separator.\n\n* Will *not* validate the path for invalid characters and semantics.\n* Will *not* look at the scheme of this Uri.\n* The resulting string shall *not* be used for display purposes but for disk operations, like `readFile` et al.\n\nThe *difference* to the  {@linkcode  Uri.path path } -property is the use of the platform specific path separator and the handling of UNC paths. The sample below outlines the difference: ```ts const u = URI.parse('file://server/c$/folder/file.txt') u.authority === 'server' u.path === '/shares/c$/file.txt' u.fsPath === '\\\\server\\c$\\folder\\file.txt' ```"
                                    }
                                  },
                                  "required": [
                                    "scheme",
                                    "authority",
                                    "path",
                                    "query",
                                    "fragment",
                                    "fsPath"
                                  ],
                                  "additionalProperties": false,
                                  "markdownDescription": "A universal resource identifier representing either a file on disk or another resource, like untitled resources."
                                }
                              ],
                              "markdownDescription": "An **absolute path** or an URI to an image to be rendered in the attachment. Either an icon or a text can be shown, but not both."
                            },
                            "border": {
                              "type": "string",
                              "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                            },
                            "borderColor": {
                              "anyOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "markdownDescription": "A reference to one of the workbench colors as defined in https://code.visualstudio.com/docs/getstarted/theme-color-reference. Using a theme color is preferred over a custom color as it gives theme authors and users the possibility to change the color."
                                }
                              ],
                              "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration."
                            },
                            "fontStyle": {
                              "type": "string",
                              "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                            },
                            "fontWeight": {
                              "type": "string",
                              "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                            },
                            "textDecoration": {
                              "type": "string",
                              "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                            },
                            "color": {
                              "anyOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "markdownDescription": "A reference to one of the workbench colors as defined in https://code.visualstudio.com/docs/getstarted/theme-color-reference. Using a theme color is preferred over a custom color as it gives theme authors and users the possibility to change the color."
                                }
                              ],
                              "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                            },
                            "backgroundColor": {
                              "anyOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "markdownDescription": "A reference to one of the workbench colors as defined in https://code.visualstudio.com/docs/getstarted/theme-color-reference. Using a theme color is preferred over a custom color as it gives theme authors and users the possibility to change the color."
                                }
                              ],
                              "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                            },
                            "margin": {
                              "type": "string",
                              "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                            },
                            "width": {
                              "type": "string",
                              "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                            },
                            "height": {
                              "type": "string",
                              "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                            }
                          },
                          "additionalProperties": false
                        },
                        "after": {
                          "markdownDescription": "Defines the rendering options of the attachment that is inserted after the decorated text.",
                          "type": "object",
                          "properties": {
                            "contentText": {
                              "type": "string",
                              "markdownDescription": "Defines a text content that is shown in the attachment. Either an icon or a text can be shown, but not both."
                            },
                            "contentIconPath": {
                              "anyOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "scheme": {
                                      "type": "string",
                                      "markdownDescription": "Scheme is the `http` part of `http://www.example.com/some/path?query#fragment`. The part before the first colon."
                                    },
                                    "authority": {
                                      "type": "string",
                                      "markdownDescription": "Authority is the `www.example.com` part of `http://www.example.com/some/path?query#fragment`. The part between the first double slashes and the next slash."
                                    },
                                    "path": {
                                      "type": "string",
                                      "markdownDescription": "Path is the `/some/path` part of `http://www.example.com/some/path?query#fragment`."
                                    },
                                    "query": {
                                      "type": "string",
                                      "markdownDescription": "Query is the `query` part of `http://www.example.com/some/path?query#fragment`."
                                    },
                                    "fragment": {
                                      "type": "string",
                                      "markdownDescription": "Fragment is the `fragment` part of `http://www.example.com/some/path?query#fragment`."
                                    },
                                    "fsPath": {
                                      "type": "string",
                                      "markdownDescription": "The string representing the corresponding file system path of this Uri.\n\nWill handle UNC paths and normalize windows drive letters to lower-case. Also uses the platform specific path separator.\n\n* Will *not* validate the path for invalid characters and semantics.\n* Will *not* look at the scheme of this Uri.\n* The resulting string shall *not* be used for display purposes but for disk operations, like `readFile` et al.\n\nThe *difference* to the  {@linkcode  Uri.path path } -property is the use of the platform specific path separator and the handling of UNC paths. The sample below outlines the difference: ```ts const u = URI.parse('file://server/c$/folder/file.txt') u.authority === 'server' u.path === '/shares/c$/file.txt' u.fsPath === '\\\\server\\c$\\folder\\file.txt' ```"
                                    }
                                  },
                                  "required": [
                                    "scheme",
                                    "authority",
                                    "path",
                                    "query",
                                    "fragment",
                                    "fsPath"
                                  ],
                                  "additionalProperties": false,
                                  "markdownDescription": "A universal resource identifier representing either a file on disk or another resource, like untitled resources."
                                }
                              ],
                              "markdownDescription": "An **absolute path** or an URI to an image to be rendered in the attachment. Either an icon or a text can be shown, but not both."
                            },
                            "border": {
                              "type": "string",
                              "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                            },
                            "borderColor": {
                              "anyOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "markdownDescription": "A reference to one of the workbench colors as defined in https://code.visualstudio.com/docs/getstarted/theme-color-reference. Using a theme color is preferred over a custom color as it gives theme authors and users the possibility to change the color."
                                }
                              ],
                              "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration."
                            },
                            "fontStyle": {
                              "type": "string",
                              "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                            },
                            "fontWeight": {
                              "type": "string",
                              "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                            },
                            "textDecoration": {
                              "type": "string",
                              "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                            },
                            "color": {
                              "anyOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "markdownDescription": "A reference to one of the workbench colors as defined in https://code.visualstudio.com/docs/getstarted/theme-color-reference. Using a theme color is preferred over a custom color as it gives theme authors and users the possibility to change the color."
                                }
                              ],
                              "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                            },
                            "backgroundColor": {
                              "anyOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "markdownDescription": "A reference to one of the workbench colors as defined in https://code.visualstudio.com/docs/getstarted/theme-color-reference. Using a theme color is preferred over a custom color as it gives theme authors and users the possibility to change the color."
                                }
                              ],
                              "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                            },
                            "margin": {
                              "type": "string",
                              "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                            },
                            "width": {
                              "type": "string",
                              "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                            },
                            "height": {
                              "type": "string",
                              "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    },
                    "dark": {
                      "markdownDescription": "Represents theme specific rendering styles for a  {@link  TextEditorDecorationType text editor decoration } .",
                      "type": "object",
                      "properties": {
                        "backgroundColor": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "additionalProperties": false,
                              "markdownDescription": "A reference to one of the workbench colors as defined in https://code.visualstudio.com/docs/getstarted/theme-color-reference. Using a theme color is preferred over a custom color as it gives theme authors and users the possibility to change the color."
                            }
                          ],
                          "markdownDescription": "Background color of the decoration. Use rgba() and define transparent background colors to play well with other decorations. Alternatively a color from the color registry can be  {@link  ThemeColor referenced } ."
                        },
                        "outline": {
                          "type": "string",
                          "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration."
                        },
                        "outlineColor": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "additionalProperties": false,
                              "markdownDescription": "A reference to one of the workbench colors as defined in https://code.visualstudio.com/docs/getstarted/theme-color-reference. Using a theme color is preferred over a custom color as it gives theme authors and users the possibility to change the color."
                            }
                          ],
                          "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration. Better use 'outline' for setting one or more of the individual outline properties."
                        },
                        "outlineStyle": {
                          "type": "string",
                          "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration. Better use 'outline' for setting one or more of the individual outline properties."
                        },
                        "outlineWidth": {
                          "type": "string",
                          "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration. Better use 'outline' for setting one or more of the individual outline properties."
                        },
                        "border": {
                          "type": "string",
                          "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration."
                        },
                        "borderColor": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "additionalProperties": false,
                              "markdownDescription": "A reference to one of the workbench colors as defined in https://code.visualstudio.com/docs/getstarted/theme-color-reference. Using a theme color is preferred over a custom color as it gives theme authors and users the possibility to change the color."
                            }
                          ],
                          "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration. Better use 'border' for setting one or more of the individual border properties."
                        },
                        "borderRadius": {
                          "type": "string",
                          "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration. Better use 'border' for setting one or more of the individual border properties."
                        },
                        "borderSpacing": {
                          "type": "string",
                          "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration. Better use 'border' for setting one or more of the individual border properties."
                        },
                        "borderStyle": {
                          "type": "string",
                          "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration. Better use 'border' for setting one or more of the individual border properties."
                        },
                        "borderWidth": {
                          "type": "string",
                          "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration. Better use 'border' for setting one or more of the individual border properties."
                        },
                        "fontStyle": {
                          "type": "string",
                          "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration."
                        },
                        "fontWeight": {
                          "type": "string",
                          "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration."
                        },
                        "textDecoration": {
                          "type": "string",
                          "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration."
                        },
                        "cursor": {
                          "type": "string",
                          "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration."
                        },
                        "color": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "additionalProperties": false,
                              "markdownDescription": "A reference to one of the workbench colors as defined in https://code.visualstudio.com/docs/getstarted/theme-color-reference. Using a theme color is preferred over a custom color as it gives theme authors and users the possibility to change the color."
                            }
                          ],
                          "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration."
                        },
                        "opacity": {
                          "type": "string",
                          "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration."
                        },
                        "letterSpacing": {
                          "type": "string",
                          "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration."
                        },
                        "gutterIconPath": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "scheme": {
                                  "type": "string",
                                  "markdownDescription": "Scheme is the `http` part of `http://www.example.com/some/path?query#fragment`. The part before the first colon."
                                },
                                "authority": {
                                  "type": "string",
                                  "markdownDescription": "Authority is the `www.example.com` part of `http://www.example.com/some/path?query#fragment`. The part between the first double slashes and the next slash."
                                },
                                "path": {
                                  "type": "string",
                                  "markdownDescription": "Path is the `/some/path` part of `http://www.example.com/some/path?query#fragment`."
                                },
                                "query": {
                                  "type": "string",
                                  "markdownDescription": "Query is the `query` part of `http://www.example.com/some/path?query#fragment`."
                                },
                                "fragment": {
                                  "type": "string",
                                  "markdownDescription": "Fragment is the `fragment` part of `http://www.example.com/some/path?query#fragment`."
                                },
                                "fsPath": {
                                  "type": "string",
                                  "markdownDescription": "The string representing the corresponding file system path of this Uri.\n\nWill handle UNC paths and normalize windows drive letters to lower-case. Also uses the platform specific path separator.\n\n* Will *not* validate the path for invalid characters and semantics.\n* Will *not* look at the scheme of this Uri.\n* The resulting string shall *not* be used for display purposes but for disk operations, like `readFile` et al.\n\nThe *difference* to the  {@linkcode  Uri.path path } -property is the use of the platform specific path separator and the handling of UNC paths. The sample below outlines the difference: ```ts const u = URI.parse('file://server/c$/folder/file.txt') u.authority === 'server' u.path === '/shares/c$/file.txt' u.fsPath === '\\\\server\\c$\\folder\\file.txt' ```"
                                }
                              },
                              "required": [
                                "scheme",
                                "authority",
                                "path",
                                "query",
                                "fragment",
                                "fsPath"
                              ],
                              "additionalProperties": false,
                              "markdownDescription": "A universal resource identifier representing either a file on disk or another resource, like untitled resources."
                            }
                          ],
                          "markdownDescription": "An **absolute path** or an URI to an image to be rendered in the gutter."
                        },
                        "gutterIconSize": {
                          "type": "string",
                          "markdownDescription": "Specifies the size of the gutter icon. Available values are 'auto', 'contain', 'cover' and any percentage value. For further information: https://msdn.microsoft.com/en-us/library/jj127316(v=vs.85).aspx"
                        },
                        "overviewRulerColor": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "additionalProperties": false,
                              "markdownDescription": "A reference to one of the workbench colors as defined in https://code.visualstudio.com/docs/getstarted/theme-color-reference. Using a theme color is preferred over a custom color as it gives theme authors and users the possibility to change the color."
                            }
                          ],
                          "markdownDescription": "The color of the decoration in the overview ruler. Use rgba() and define transparent colors to play well with other decorations."
                        },
                        "before": {
                          "markdownDescription": "Defines the rendering options of the attachment that is inserted before the decorated text.",
                          "type": "object",
                          "properties": {
                            "contentText": {
                              "type": "string",
                              "markdownDescription": "Defines a text content that is shown in the attachment. Either an icon or a text can be shown, but not both."
                            },
                            "contentIconPath": {
                              "anyOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "scheme": {
                                      "type": "string",
                                      "markdownDescription": "Scheme is the `http` part of `http://www.example.com/some/path?query#fragment`. The part before the first colon."
                                    },
                                    "authority": {
                                      "type": "string",
                                      "markdownDescription": "Authority is the `www.example.com` part of `http://www.example.com/some/path?query#fragment`. The part between the first double slashes and the next slash."
                                    },
                                    "path": {
                                      "type": "string",
                                      "markdownDescription": "Path is the `/some/path` part of `http://www.example.com/some/path?query#fragment`."
                                    },
                                    "query": {
                                      "type": "string",
                                      "markdownDescription": "Query is the `query` part of `http://www.example.com/some/path?query#fragment`."
                                    },
                                    "fragment": {
                                      "type": "string",
                                      "markdownDescription": "Fragment is the `fragment` part of `http://www.example.com/some/path?query#fragment`."
                                    },
                                    "fsPath": {
                                      "type": "string",
                                      "markdownDescription": "The string representing the corresponding file system path of this Uri.\n\nWill handle UNC paths and normalize windows drive letters to lower-case. Also uses the platform specific path separator.\n\n* Will *not* validate the path for invalid characters and semantics.\n* Will *not* look at the scheme of this Uri.\n* The resulting string shall *not* be used for display purposes but for disk operations, like `readFile` et al.\n\nThe *difference* to the  {@linkcode  Uri.path path } -property is the use of the platform specific path separator and the handling of UNC paths. The sample below outlines the difference: ```ts const u = URI.parse('file://server/c$/folder/file.txt') u.authority === 'server' u.path === '/shares/c$/file.txt' u.fsPath === '\\\\server\\c$\\folder\\file.txt' ```"
                                    }
                                  },
                                  "required": [
                                    "scheme",
                                    "authority",
                                    "path",
                                    "query",
                                    "fragment",
                                    "fsPath"
                                  ],
                                  "additionalProperties": false,
                                  "markdownDescription": "A universal resource identifier representing either a file on disk or another resource, like untitled resources."
                                }
                              ],
                              "markdownDescription": "An **absolute path** or an URI to an image to be rendered in the attachment. Either an icon or a text can be shown, but not both."
                            },
                            "border": {
                              "type": "string",
                              "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                            },
                            "borderColor": {
                              "anyOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "markdownDescription": "A reference to one of the workbench colors as defined in https://code.visualstudio.com/docs/getstarted/theme-color-reference. Using a theme color is preferred over a custom color as it gives theme authors and users the possibility to change the color."
                                }
                              ],
                              "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration."
                            },
                            "fontStyle": {
                              "type": "string",
                              "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                            },
                            "fontWeight": {
                              "type": "string",
                              "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                            },
                            "textDecoration": {
                              "type": "string",
                              "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                            },
                            "color": {
                              "anyOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "markdownDescription": "A reference to one of the workbench colors as defined in https://code.visualstudio.com/docs/getstarted/theme-color-reference. Using a theme color is preferred over a custom color as it gives theme authors and users the possibility to change the color."
                                }
                              ],
                              "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                            },
                            "backgroundColor": {
                              "anyOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "markdownDescription": "A reference to one of the workbench colors as defined in https://code.visualstudio.com/docs/getstarted/theme-color-reference. Using a theme color is preferred over a custom color as it gives theme authors and users the possibility to change the color."
                                }
                              ],
                              "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                            },
                            "margin": {
                              "type": "string",
                              "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                            },
                            "width": {
                              "type": "string",
                              "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                            },
                            "height": {
                              "type": "string",
                              "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                            }
                          },
                          "additionalProperties": false
                        },
                        "after": {
                          "markdownDescription": "Defines the rendering options of the attachment that is inserted after the decorated text.",
                          "type": "object",
                          "properties": {
                            "contentText": {
                              "type": "string",
                              "markdownDescription": "Defines a text content that is shown in the attachment. Either an icon or a text can be shown, but not both."
                            },
                            "contentIconPath": {
                              "anyOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "scheme": {
                                      "type": "string",
                                      "markdownDescription": "Scheme is the `http` part of `http://www.example.com/some/path?query#fragment`. The part before the first colon."
                                    },
                                    "authority": {
                                      "type": "string",
                                      "markdownDescription": "Authority is the `www.example.com` part of `http://www.example.com/some/path?query#fragment`. The part between the first double slashes and the next slash."
                                    },
                                    "path": {
                                      "type": "string",
                                      "markdownDescription": "Path is the `/some/path` part of `http://www.example.com/some/path?query#fragment`."
                                    },
                                    "query": {
                                      "type": "string",
                                      "markdownDescription": "Query is the `query` part of `http://www.example.com/some/path?query#fragment`."
                                    },
                                    "fragment": {
                                      "type": "string",
                                      "markdownDescription": "Fragment is the `fragment` part of `http://www.example.com/some/path?query#fragment`."
                                    },
                                    "fsPath": {
                                      "type": "string",
                                      "markdownDescription": "The string representing the corresponding file system path of this Uri.\n\nWill handle UNC paths and normalize windows drive letters to lower-case. Also uses the platform specific path separator.\n\n* Will *not* validate the path for invalid characters and semantics.\n* Will *not* look at the scheme of this Uri.\n* The resulting string shall *not* be used for display purposes but for disk operations, like `readFile` et al.\n\nThe *difference* to the  {@linkcode  Uri.path path } -property is the use of the platform specific path separator and the handling of UNC paths. The sample below outlines the difference: ```ts const u = URI.parse('file://server/c$/folder/file.txt') u.authority === 'server' u.path === '/shares/c$/file.txt' u.fsPath === '\\\\server\\c$\\folder\\file.txt' ```"
                                    }
                                  },
                                  "required": [
                                    "scheme",
                                    "authority",
                                    "path",
                                    "query",
                                    "fragment",
                                    "fsPath"
                                  ],
                                  "additionalProperties": false,
                                  "markdownDescription": "A universal resource identifier representing either a file on disk or another resource, like untitled resources."
                                }
                              ],
                              "markdownDescription": "An **absolute path** or an URI to an image to be rendered in the attachment. Either an icon or a text can be shown, but not both."
                            },
                            "border": {
                              "type": "string",
                              "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                            },
                            "borderColor": {
                              "anyOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "markdownDescription": "A reference to one of the workbench colors as defined in https://code.visualstudio.com/docs/getstarted/theme-color-reference. Using a theme color is preferred over a custom color as it gives theme authors and users the possibility to change the color."
                                }
                              ],
                              "markdownDescription": "CSS styling property that will be applied to text enclosed by a decoration."
                            },
                            "fontStyle": {
                              "type": "string",
                              "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                            },
                            "fontWeight": {
                              "type": "string",
                              "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                            },
                            "textDecoration": {
                              "type": "string",
                              "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                            },
                            "color": {
                              "anyOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "markdownDescription": "A reference to one of the workbench colors as defined in https://code.visualstudio.com/docs/getstarted/theme-color-reference. Using a theme color is preferred over a custom color as it gives theme authors and users the possibility to change the color."
                                }
                              ],
                              "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                            },
                            "backgroundColor": {
                              "anyOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "markdownDescription": "A reference to one of the workbench colors as defined in https://code.visualstudio.com/docs/getstarted/theme-color-reference. Using a theme color is preferred over a custom color as it gives theme authors and users the possibility to change the color."
                                }
                              ],
                              "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                            },
                            "margin": {
                              "type": "string",
                              "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                            },
                            "width": {
                              "type": "string",
                              "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                            },
                            "height": {
                              "type": "string",
                              "markdownDescription": "CSS styling property that will be applied to the decoration attachment."
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    },
                    "captureGroup": {
                      "type": "number",
                      "markdownDescription": "The portion of the matched text to apply the effect to.",
                      "default": 0
                    },
                    "link": {
                      "type": "string",
                      "markdownDescription": "A link to open when the relevant match is clicked.\n\nCapture group substitution is supported, e.g. \"$1\"."
                    },
                    "hoverMessage": {
                      "type": "string",
                      "markdownDescription": "Text to display when hovering over the relevant match.\n\nCapture group substitution is supported, e.g. \"$1\"."
                    },
                    "inlineReplacement": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "contentText": {
                              "type": "string",
                              "markdownDescription": "Defines a text content that is shown in the attachment. Either an icon or a text can be shown, but not both."
                            }
                          },
                          "additionalProperties": false,
                          "markdownDescription": "Useful to flatten the type output to improve type hints shown in editors. And also to transform an interface into a type to aide with assignability."
                        }
                      ],
                      "markdownDescription": "Text to display in the editor instead of the matched text, so long as the cursor (or current selection) is not on the line of the match.\n\nCapture group substitution is supported, e.g. \"$1\".\n\nThe substitution is defined in the \"contextText\" property."
                    }
                  },
                  "additionalProperties": false
                },
                "markdownDescription": "Effects to apply to the matched text in the text editor / terminal.\n\n## Capture groups\n\nThe `captureGroup` property defines which portion of the matched text to apply the effect to. If omitted, it defaults to the entire match.\n\nFor example, `captureGroup: 2` applies to \"world\" in a match for the regex pattern `/(hello) (world)/`, the same way you'd use \"$2\" in JavaScripts `String.prototype.replace(RegExp, String)` method.\n\nWith this, you can style different parts of the matched text independently.\n\n## Terminal links\n\nEffects in the terminal are limited to links (no styling).",
                "default": []
              },
              "tree": {
                "type": "object",
                "properties": {
                  "group": {
                    "type": "string",
                    "markdownDescription": "A label to group matches under in the tree view.",
                    "default": "Ungrouped"
                  },
                  "label": {
                    "type": "string",
                    "markdownDescription": "The text to display for each match in the tree view.\n\nCapture group substitution is supported, e.g. \"$1\".",
                    "default": "$0"
                  }
                },
                "additionalProperties": false,
                "markdownDescription": "Options for the tree view."
              }
            },
            "required": [
              "regex"
            ],
            "additionalProperties": false
          },
          "markdownDescription": "An array of regex patterns, and the rules to apply to them."
        }
      }
    },
    "views": {
      "explorer": [
        {
          "id": "regexRobin",
          "name": "Regex Robin",
          "contextualTitle": "Regex matches"
        }
      ]
    }
  }
}